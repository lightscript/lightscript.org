import React from 'react'
import { Container, Row, Col } from 'components/bootstrap'
import cx from 'classnames'
import compileLscToJs from 'util/compileLscToJs'

import reactExample from '!raw!./reactExample.lsc.txt'

// HACK: can't load Ace during ssr
let AceEditor
if typeof window != 'undefined' and window:
  now AceEditor = require('react-ace').default
  require('brace')
  require('brace/mode/jsx')
  require('util/braceLscMode')
  require('brace/theme/chrome')

styles = {
  heroSubtitle: {
    color: 'hsla(203, 7%, 30%, 1)'
  }
  codeWrapper: {
    boxShadow: '0px 0px 6px 1px rgba(0,0,0,.1)'
  }
}

Hero() ->
  <div className="py-4 mt-n1 hero">
    <center className="pt-7 pb-3">
      <h1 style={styles.heroTitle}>LightScript</h1>
      <h3 className="pt-2" style={styles.heroSubtitle}>
        A Concise Syntax for JavaScript
      </h3>
    </center>

    <Container>
      <Row className="justify-content-sm-center">
        <Col sm={8}>
          <center>
            <p className="lead pt-4">
              A close superset of ES7 with JSX and Flow, built with Babel.
            </p>
            <p className="lead pb-6">
              Designed to make programmers a little more productive.
            </p>
          </center>
        </Col>
      </Row>
    </Container>
  </div>

CodeColTitle({ children }) =>
  <div className="code-group-title w-100 px-3 py-1 text-center">
    {children}
  </div>

CodeCol({ code, syntax, title, onChange }) =>
  if not AceEditor:
    return <Col sm="6" className={cx("p-3", syntax)}><pre>{code}</pre></Col>
  mode =
    if syntax == "js": "jsx"
    else: syntax
  numLines = code.split('\n').length

  <Col sm="6" className={cx('p-0', syntax)}>
    <CodeColTitle>
      {title}
    </CodeColTitle>
    <div className="p-3">
      <AceEditor
        mode={mode}
        theme="chrome"
        value={code}
        height='100%'
        width='100%'
        style={{
          backgroundColor: 'transparent'
        }}
        minLines={numLines}
        maxLines={numLines}
        showGutter={false}
        tabSize={2}
        onChange={onChange}
        readOnly={syntax == 'js'}
        name={`ace-${syntax}`}
        highlightActiveLine={syntax != 'js'}
      />
    </div>
  </Col>
CodeCol.propTypes = {
  code: React.PropTypes.string.isRequired
  title: React.PropTypes.string.isRequired
  syntax: React.PropTypes.oneOf(['lsc', 'js']).isRequired
  onChange: React.PropTypes.func
}

class CompiledCode extends React.Component:
  constructor(props) ->
    { lsc } = props
    this.state = { lsc }

  static propTypes = {
    lsc: React.PropTypes.string.isRequired
  }

  // TODO: use =>
  updateLsc(lsc): void ->
    this.setState({ lsc })

  render() ->
    lsc = this.state.lsc
    js = compileLscToJs(lsc)

    lscTitle = '(editable) LightScript in...'
    jsTitle = '...JavaScript out.'

    <Row className="mb-3 compiled-code-group compiled-code-group-ace">
      <CodeCol code={lsc} syntax="lsc" title={lscTitle} onChange={(lsc) => this.updateLsc(lsc)} />
      <CodeCol code={js} syntax="js" title={jsTitle} />
    </Row>

ReactExample() =>
  <Row className="justify-content-sm-center mt-n3">
    <Col sm={10}>
      <CompiledCode lsc={reactExample.trim()} />
    </Col>
  </Row>

HomepageSection({ children }) ->
  <Row className="justify-content-sm-center my-5">
    <Col sm={8}>
      {children}
    </Col>
  </Row>


WhyLightScript() =>
  <HomepageSection>
    <h3>Why LightScript?</h3>

    <p>
      Developers care about syntax for a reason.
      Not only is concise syntax faster to read and faster to write,
      all syntax guides how you write code â€“ for better and for worse.
      If "the right way" is verbose or awkward,
      developers too often choose the wrong way.
    </p>
    <p>
      Writing maintainable, correct, performant code should be the default.
    </p>
    <p>
      LightScript aims to align "the easy way" and "the right way"
      by giving best practices and functional idioms
      the approachability of Ruby and Python.
    </p>
    <p>
      Interoperability with JavaScript is at the core of the language;
      it is implemented as a fork of Babel's parser, and functions as a
      superset of ES7 with minimal backwards-incompatibilities.
      Every LightScript language feature strives for a clear 1:1 mapping
      to JavaScript code you might have written yourself.
    </p>
  </HomepageSection>

Installation() =>
  <HomepageSection>
    <h3>Installation & Usage</h3>

    <p>
      For all ES7 features (including <code>import</code>) and runtime typechecks, use the preset:
    </p>
    <h4>
      <code>$ npm install babel-preset-lightscript</code>
    </h4>

    <p>
      If you just want the core language, use the plugin:
    </p>
    <p>
      <code>$ npm install babel-plugin-lightscript</code>
    </p>
    <p>
      ...and add to your <code>.babelrc</code>.
    </p>

    <p>
      The LightScript plugin currently only processes files
      with <code>.lsc</code> or <code>.lsx</code> in the filename.
      You can use <code>.lsc.js</code> and similar if you like.
    </p>

    <h4>
      Example usage:
    </h4>
    <p>
      <code>$ babel --presets lightscript -x .lsc</code>
    </p>
    <p>
      Or, if you have added <code>{'{'}"presets": ["lightscript"]}</code> to
      your <code>.babelrc</code>:
    </p>
    <p>
      <code>$ babel -x .lsc</code>
    </p>
    <p>
      If you're using webpack, loaders work as expected:
    </p>
    <p>
      <code>{`
        test: /\.(lsc|jsx?)/,
        loader: 'babel-loader',
        query: {
          presets: ['lightscript']
        }
      `}</code>
    </p>
  </HomepageSection>

ProjectStatus() =>
  <HomepageSection>
    <h3>Project Status</h3>
    <p>
      <em>(as of March 2017)</em>
    </p>
    <p>
      LightScript is ready to be used as alpha software.
      The language itself is "mostly done", with a few nice-to-have features
      not yet built but a solid core complete.
    </p>
    <p>
      Tooling is immature, though there is hacky syntax highlighting for
      {' '}
      <a href="https://atom.io/packages/lightscript-atom" target="_blank">
        Atom
      </a>
      {' '}and{' '}
      <a href="https://github.com/lightscript/lightscript-sublime" target="_blank">
        Sublime
      </a>. Prorities include:
      more and better syntax highlighters;{' '}
      <a href="https://github.com/prettier/prettier" target="_blank">
        prettier
      </a>-based auto-formatting;
      js-to-lightscript compilation;
      a standalone `lightscript` CLI;
      eslint support;
      and integration with the Flow typechecker.
    </p>
    <p>
      Better documentation (particuarly guides and feature explanations)
      is also a high priority. For now,
      the <a href="https://github.com/lightscript/lightscript.org">
        source code for this website
      </a> is the best example of LightScript code in the wild.
    </p>
    <p>
      I'm currently feeling out whether this project will be popular
      and impactful enough to be worth heavily investing in (there's a lot to do).
      There will be no backwards-compatibility
      guarantees until the project hits v1.0 (at least a year)
      and it may be shelved entirely.
    </p>
    <p>
      Please don't rely on LightScript for Serious Production Stuff yet.
    </p>
  </HomepageSection>

CompletedFeatures() =>
  <HomepageSection>
    <h3>Features</h3>
    <p>
      <em>In addition to all all ES7, JSX, and Flow features:</em>
    </p>

    <ul>
      <li>(Optional) Significant Indentation</li>
      <li>Implicit Returns</li>
      <li>If Expressions</li>
      <li>Auto const</li>
      <li>Async/Await shorthand</li>
      <li>Safe-Await</li>
      <li>Readable Operators (or, and, ==, etc)</li>
      <li>Bound Methods</li>
      <li>Commaless Objects and Arrays</li>
      <li>Automatic Semicolon Insertion that always works</li>
      <li>Array Comprehensions</li>
      <li>Array-based for-loops</li>
      <li>Range-based for-loops</li>

      <li>several others</li>
    </ul>

    <p>
      Tests for all features can be seen{' '}
      <a href="https://github.com/lightscript/babylon-lightscript/tree/lightscript/test/fixtures/lightscript">
        here
      </a>
      {' '}and{' '}
      <a href="https://github.com/lightscript/babel-plugin-lightscript/tree/master/test/fixtures">
        here
      </a>.
    </p>
  </HomepageSection>

export default () =>
  <div className="pb-6">
    <Hero />

    <Container>
      <ReactExample />

      <WhyLightScript />

      <Installation />

      <CompletedFeatures />

      <ProjectStatus />

    </Container>
  </div>
